[gd_resource type="ShaderMaterial" load_steps=4 format=3 uid="uid://b4nkphxws6l05"]

[sub_resource type="Shader" id="19"]
code = "shader_type canvas_item;
uniform vec2 offset_amp = vec2(0.05);
uniform sampler2D noise_texture;
uniform float fps = 12.0;
uniform vec2 tex_scale = vec2(3.0);
uniform float offset = 0.0;

float random (vec2 uv) {
    return fract(sin(dot(uv.xy,
        vec2(12.9898,78.233))) * 43758.5453123);
}

void fragment(){
	float quant_time = round(TIME * fps);
	vec2 texture_off = vec2(random(vec2(0.0, quant_time)), random(vec2(quant_time,0.0)));
	vec2 noise_coordinate = (SCREEN_UV + texture_off) * tex_scale;
	noise_coordinate += vec2(offset);
	float one = 1.0;
	noise_coordinate.x = modf(noise_coordinate.x, one);
	noise_coordinate.y = modf(noise_coordinate.y, one);
	vec2 random_off = texture(noise_texture, noise_coordinate).rg - vec2(0.5);
	float original_alpha = COLOR.a;
	COLOR.rgb = texture(TEXTURE, UV + random_off * offset_amp).rgb;
	//COLOR.a = texture(TEXTURE, UV + random_off * offset_amp).a * original_alpha;
	//vec2 random_offset = random(vec2(0.0, TIME))
}"

[sub_resource type="FastNoiseLite" id="20"]
frequency = 0.005
fractal_octaves = 3
fractal_weighted_strength = 0.5

[sub_resource type="NoiseTexture2D" id="21"]
seamless = true
as_normal_map = true
bump_strength = 1.0
noise = SubResource("20")

[resource]
shader = SubResource("19")
shader_parameter/offset_amp = Vector2(0.795, 0.795)
shader_parameter/noise_texture = SubResource("21")
shader_parameter/fps = 6.0
shader_parameter/tex_scale = Vector2(3, 3)
shader_parameter/offset = -2.575
